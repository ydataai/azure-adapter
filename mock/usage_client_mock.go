// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/clients/usage_client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	compute "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute"
	gomock "github.com/golang/mock/gomock"
)

// MockUsageClientInterface is a mock of UsageClientInterface interface.
type MockUsageClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUsageClientInterfaceMockRecorder
}

// MockUsageClientInterfaceMockRecorder is the mock recorder for MockUsageClientInterface.
type MockUsageClientInterfaceMockRecorder struct {
	mock *MockUsageClientInterface
}

// NewMockUsageClientInterface creates a new mock instance.
func NewMockUsageClientInterface(ctrl *gomock.Controller) *MockUsageClientInterface {
	mock := &MockUsageClientInterface{ctrl: ctrl}
	mock.recorder = &MockUsageClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsageClientInterface) EXPECT() *MockUsageClientInterfaceMockRecorder {
	return m.recorder
}

// ComputeUsage mocks base method.
func (m *MockUsageClientInterface) ComputeUsage(arg0 context.Context, arg1, arg2 string) (compute.Usage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeUsage", arg0, arg1, arg2)
	ret0, _ := ret[0].(compute.Usage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeUsage indicates an expected call of ComputeUsage.
func (mr *MockUsageClientInterfaceMockRecorder) ComputeUsage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeUsage", reflect.TypeOf((*MockUsageClientInterface)(nil).ComputeUsage), arg0, arg1, arg2)
}
